{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","initialFilter","active","Idle","isReversed","App","useState","activeFilter","setActiveFilter","isResetButtonVisible","handleSetSortFilter","filter","goodsForRender","cloneGoodsFromServer","Alphabet","sort","a","b","localeCompare","Length","length","Error","reverse","getGoodsForRender","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAmBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,YAAAA,E,oBAAAA,E,iBAAAA,M,KAWL,IAAME,EAAwB,CAC5BC,OAAQH,EAASI,KACjBC,YAAY,GA6BDC,EAAgB,WAC3B,MAAwCC,mBAASL,GAAjD,mBAAOM,EAAP,KAAqBC,EAArB,KAEMC,EAAuBF,EAAaL,SAAWD,EAAcC,QAC9DK,EAAaH,aAAeH,EAAcG,WAEzCM,EAAsB,SAACC,GAC3BH,EAAgB,2BACXD,GADU,IAEbL,OAAQS,MAINC,EAvCkB,SAAC,GAA8C,IAA5CV,EAA2C,EAA3CA,OAAQE,EAAmC,EAAnCA,WAC7BS,EAAoB,UAAOb,GAEjC,OAAQE,GACN,KAAKH,EAASI,KACZ,MAEF,KAAKJ,EAASe,SACZD,EAAqBE,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,cAAcD,MACpD,MAEF,KAAKlB,EAASoB,OACZN,EAAqBE,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEI,OAASH,EAAEG,UACjD,MAEF,QACE,MAAM,IAAIC,MAAM,sBAOpB,OAJIjB,GACFS,EAAqBS,UAGhBT,EAgBgBU,CAAkBhB,GASzC,OACE,sBAAKiB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,iBAAkB,CAC9B,WAAYnB,EAAaL,SAAWH,EAASe,WAE/Ca,QAAS,kBAAMjB,EAAoBX,EAASe,WAL9C,iCAUA,wBACEW,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,WAAYnB,EAAaL,SAAWH,EAASoB,SAE/CQ,QAAS,kBAAMjB,EAAoBX,EAASoB,SAL9C,4BAUA,wBACEM,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,YAAanB,EAAaH,aAE5BuB,QAnCqB,WAC3BnB,EAAgB,2BACXD,GADU,IAEbH,YAAaG,EAAaH,eA2BxB,qBAUCK,GACC,wBACEgB,KAAK,SACLD,UAAU,4BACVG,QAAS,kBAAMnB,EAAgBP,IAHjC,sBAUJ,6BACGW,EAAegB,KAAI,SAAAC,GAAI,OACtB,oBACE,UAAQ,OADV,SAIGA,GAFIA,YChIjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.71b872d0.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\n\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  Idle = 'idle',\n  Alphabet = 'alphabet',\n  Length = 'length',\n}\n\ninterface Filter {\n  active: SortType;\n  isReversed: boolean;\n}\n\nconst initialFilter: Filter = {\n  active: SortType.Idle,\n  isReversed: false,\n};\n\nconst getGoodsForRender = ({ active, isReversed }: Filter): string[] => {\n  const cloneGoodsFromServer = [...goodsFromServer];\n\n  switch (active) {\n    case SortType.Idle:\n      break;\n\n    case SortType.Alphabet:\n      cloneGoodsFromServer.sort((a, b) => a.localeCompare(b));\n      break;\n\n    case SortType.Length:\n      cloneGoodsFromServer.sort((a, b) => a.length - b.length);\n      break;\n\n    default:\n      throw new Error('Switch case error!');\n  }\n\n  if (isReversed) {\n    cloneGoodsFromServer.reverse();\n  }\n\n  return cloneGoodsFromServer;\n};\n\nexport const App: React.FC = () => {\n  const [activeFilter, setActiveFilter] = useState(initialFilter);\n\n  const isResetButtonVisible = activeFilter.active !== initialFilter.active\n    || activeFilter.isReversed !== initialFilter.isReversed;\n\n  const handleSetSortFilter = (filter: SortType) => {\n    setActiveFilter({\n      ...activeFilter,\n      active: filter,\n    });\n  };\n\n  const goodsForRender = getGoodsForRender(activeFilter);\n\n  const handleToggleReversed = () => {\n    setActiveFilter({\n      ...activeFilter,\n      isReversed: !activeFilter.isReversed,\n    });\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button is-info', {\n            'is-light': activeFilter.active !== SortType.Alphabet,\n          })}\n          onClick={() => handleSetSortFilter(SortType.Alphabet)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-success', {\n            'is-light': activeFilter.active !== SortType.Length,\n          })}\n          onClick={() => handleSetSortFilter(SortType.Length)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-warning', {\n            'is-light': !activeFilter.isReversed,\n          })}\n          onClick={handleToggleReversed}\n        >\n          Reverse\n        </button>\n\n        {isResetButtonVisible && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => setActiveFilter(initialFilter)}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {goodsForRender.map(good => (\n          <li\n            data-cy=\"Good\"\n            key={good}\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}